using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading.Tasks.Dataflow;
using NUnit.Framework;

namespace TestGenerator
{
    public class NUnitTestGenerator
    {
        public async Task GenerateTestsAsync(List<string> sourceFiles, string outputPath)
        {
            var loadFilesBlock = new TransformBlock<string, string>(async filePath =>
            {
                using (var reader = File.OpenText(filePath))
                {
                    return await reader.ReadToEndAsync();
                }
            });

            var generateTestsBlock = new TransformManyBlock<string, string>(async sourceCode =>
            {
                var testClasses = await GenerateTestClassesAsync(sourceCode);
                return testClasses;
            });

            var writeFilesBlock = new ActionBlock<string>(async testCode =>
            {
                string fileName = GetUniqueFileName(outputPath);
                await WriteToFileAsync(fileName, testCode);
            });

            loadFilesBlock.LinkTo(generateTestsBlock, new DataflowLinkOptions { PropagateCompletion = true });
            generateTestsBlock.LinkTo(writeFilesBlock, new DataflowLinkOptions { PropagateCompletion = true });

            foreach (var file in sourceFiles)
            {
                await loadFilesBlock.SendAsync(file);
            }

            loadFilesBlock.Complete();
            await writeFilesBlock.Completion;
        }

        private async Task<IEnumerable<string>> GenerateTestClassesAsync(string sourceCode)
        {
            await Task.Delay(100); // Демонстрационная задержка

            List<string> testClasses = new List<string>();

            // Генерация тестовых классов
            // В данном примере создаем один тестовый класс с пустыми тестами для каждого публичного метода
            // TODO: Добавьте свою логику генерации тестовых классов

            testClasses.Add(@"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using NUnit.Framework;

namespace MyCode.Tests
{
    [TestFixture]
    public class MyClassTests
    {
        [Test]
        public void FirstMethodTest()
        {
            Assert.Fail(""autogenerated"");
        }

        [Test]
        public void SecondMethodTest()
        {
            Assert.Fail(""autogenerated"");
        }
        // ...
    }
}");

            return testClasses;
        }

        private string GetUniqueFileName(string outputPath)
        {
            string fileName = Guid.NewGuid().ToString() + ".cs";
            return Path.Combine(outputPath, fileName);
        }

        private async Task WriteToFileAsync(string fileName, string content)
        {
            using (var writer = new StreamWriter(fileName))
            {
                await writer.WriteAsync(content);
            }
        }
    }
}